#include <stdio.h>
int parent[100], rank[100];
void sort(int a[][3], int n){
    for(int i=0; i<n; i++){
        for(int j=i+1;j<n;j++){
            if(a[i][2]>a[j][2]){
                int t = a[i][0];
                a[i][0] = a[j][0];
                a[j][0] = t;
                t = a[i][1];
                a[i][1] = a[j][1];
                a[j][1] = t;
                t = a[i][2];
                a[i][2] = a[j][2];
                a[j][2] = t;
            }
        }
    }
}
int find(int r){
    while(parent[r]!=r){
        parent[r] = parent[parent[r]];
        r = parent[r];
    }
    return parent[r];
}
void merge(int x, int y){
    x = find(x);
    y = find(y);
        parent[x] = parent[y];
}
int krushkals(int a[][3], int n, int v){
    for(int i = 1; i <= v; i++){
        parent[i] = i;
    }
    int i = 0,j = 0, from, to,cost = 0;
    while(j < v-1 && i < n){
        
        from = find(parent[a[i][0]]);
        to = find(parent[a[i][1]]);
        if(from == to){
            i++;
            continue;
        }else{
            merge(from, to);
            cost += a[i][2];
            j++;
        }
        i++;
    }
    
    return cost;
}
int main()
{
    int n,v;
    printf("enter no of vertices and edges");
    scanf("%d%d", &v,&n);
    int a[n][3];
    for(int i=0; i < n; i++){
        
        printf("enter edge with cost    ");
        scanf("%d %d %d", &a[i][0],&a[i][1], &a[i][2]);
    }
    // int n = 7, v = 5;
    // int a[8][3] = {{1,2,2},{1,3,3},{2,3,3},{2,4,7},{2,5,5},{3,5,8},{3,4,10},{4,5,4}};
    // int a[7][3] = {{1,2, 1},{1,3,7},{1,4,10},{1,5,5},{2,3,3},{3,4,4},{4,5,2}};
    
    sort(a,n);
    printf("after sorting\n");
    for(int i=0; i < n; i++){
    for(int j =0 ;j <3; j++){
        printf("%d ",a[i][j]);
    }
    printf("\n");
    }
    printf("cost : %d\n",krushkals(a,n,v));
    
    
}


